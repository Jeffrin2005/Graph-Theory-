class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();

        queue<pair<int,int>>q;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                
                if(board[i][0] == 'O'){
                    q.push({i,0});
                    board[i][0] = '#';
                }
                if(board[i][m - 1] == 'O'){
                    q.push({i,m - 1});
                    board[i][m - 1] = '#';
                }
                if(board[0][j] == 'O'){
                    q.push({0,j});
                    board[0][j] = '#';
                }
                if(board[n - 1][j] == 'O'){
                    q.push({n - 1,j});
                    board[n - 1][j] = '#';
                }
            }
        }

        vector<int>delrow = {-1,0,+1,0};
        vector<int>delcol = {0,+1,0,-1};

        while(!q.empty()){

            int r = q.front().first;
            int c = q.front().second;

            q.pop();

            for(int i = 0; i < 4; i++){
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];

                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && board[nrow][ncol] == 'O'){
                    q.push({nrow,ncol});
                    board[nrow][ncol] = '#';
                }
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){

                if(board[i][j] == '#'){
                    board[i][j] = 'O';
                }else{
                    board[i][j] = 'X';
                }
                cout << board[i][j] << " ";
            }
            cout << "\n";
        }

    }
};
